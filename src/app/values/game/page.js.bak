"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import Button from "components/ui/Button";

const API_URL = process.env.NEXT_PUBLIC_API_URL;
const userId = "demo-user-123";

// üîπ Prosty komponent kafelka
function ValueCard({ text, onClick }) {
  return (
    <div
      onClick={onClick}
      className="p-6 bg-yellow-50 rounded-lg border border-yellow-200 shadow-sm 
                 flex items-center justify-center text-center cursor-pointer 
                 hover:bg-yellow-100 transition"
    >
      <span className="font-semibold text-lg text-gray-800">{text}</span>
    </div>
  );
}

export default function ValuesGamePage() {
  const [round, setRound] = useState([]);
  const [winners, setWinners] = useState([]);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [finalValue, setFinalValue] = useState(null);
  const [loading, setLoading] = useState(true);
  const router = useRouter();

  useEffect(() => {
    async function fetchValues() {
      try {
        const res = await fetch(`${API_URL}/values/reduce/${userId}`);
        if (!res.ok) throw new Error("Failed to fetch reduced values");
        const data = await res.json();
        const reduced = data?.reduced_values || [];

        setRound(reduced);
        setLoading(false);
      } catch (err) {
        console.error("Error fetching values for game:", err);
        setLoading(false);
      }
    }
    fetchValues();
  }, []);

  const handleChoice = (choice) => {
    setWinners((prev) => [...prev, choice]);

    if (currentIndex + 2 < round.length) {
      // jeszcze sƒÖ kolejne pary
      setCurrentIndex(currentIndex + 2);
    } else {
      // koniec rundy
      let nextRound = [...winners, choice];

      // je≈õli liczba w rundzie by≈Ça nieparzysta ‚Üí ostatni element przechodzi automatycznie
      if (round.length % 2 === 1) {
        nextRound.push(round[round.length - 1]);
      }

      if (nextRound.length === 1) {
        setFinalValue(nextRound[0]);
      } else {
        setRound(nextRound);
        setWinners([]);
        setCurrentIndex(0);
      }
    }
  };

  if (loading) {
    return <p className="text-center mt-20">Loading values‚Ä¶</p>;
  }

  if (finalValue) {
    return (
      <div className="max-w-2xl mx-auto text-center mt-20 space-y-6">
        <h1 className="text-3xl font-bold">üèÜ Your top value is:</h1>
        <p className="text-2xl text-brand">{finalValue}</p>
        <Button onClick={() => router.push("/values/chat")} text="Continue ‚Üí" />
      </div>
    );
  }

  if (round.length < 2) {
    return <p className="text-center mt-20">Not enough values to play.</p>;
  }

  const left = round[currentIndex];
  const right = round[currentIndex + 1]; // mo≈ºe byƒá undefined

  return (
    <div className="max-w-3xl mx-auto text-center mt-20 space-y-10">
      <h2 className="text-xl font-bold">Which value is more important?</h2>
      <div className={`grid ${right ? "grid-cols-2" : "grid-cols-1"} gap-6`}>
        <ValueCard text={left} onClick={() => handleChoice(left)} />
        {right && <ValueCard text={right} onClick={() => handleChoice(right)} />}
      </div>
    </div>
  );
}
